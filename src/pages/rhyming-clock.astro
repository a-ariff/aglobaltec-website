<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Rhyming Clock</title>
    <link rel="preconnect" href="https://fonts.googleapis.com">
    <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>
    <link href="https://fonts.googleapis.com/css2?family=VT323&display=swap" rel="stylesheet">
    <style>
        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
        }

        body {
            font-family: 'VT323', monospace;
            background: linear-gradient(135deg, #1a1a2e, #16213e, #0f3460);
            color: #00ff41;
            height: 100vh;
            display: flex;
            justify-content: center;
            align-items: center;
            overflow: hidden;
        }

        .clock-container {
            background: rgba(0, 0, 0, 0.8);
            border: 2px solid #00ff41;
            border-radius: 15px;
            padding: 2rem;
            box-shadow: 0 0 30px rgba(0, 255, 65, 0.3);
            text-align: center;
            min-width: 600px;
            backdrop-filter: blur(10px);
        }

        .display-frame {
            border: 1px solid #00ff41;
            background: rgba(0, 20, 0, 0.7);
            padding: 1.5rem;
            margin-bottom: 1rem;
            border-radius: 8px;
            min-height: 120px;
        }

        .time-display {
            font-size: 3rem;
            margin-bottom: 1rem;
            text-shadow: 0 0 10px #00ff41;
            animation: glow 2s ease-in-out infinite alternate;
        }

        @keyframes glow {
            from { text-shadow: 0 0 10px #00ff41; }
            to { text-shadow: 0 0 20px #00ff41, 0 0 30px #00ff41; }
        }

        .poem-display {
            font-size: 1.2rem;
            line-height: 1.6;
            min-height: 60px;
            display: flex;
            align-items: center;
            justify-content: center;
        }

        .typing-text {
            border-right: 2px solid #00ff41;
            animation: blink 1s infinite;
        }

        @keyframes blink {
            0%, 50% { border-right-color: #00ff41; }
            51%, 100% { border-right-color: transparent; }
        }

        .controls {
            display: flex;
            gap: 1rem;
            justify-content: center;
            flex-wrap: wrap;
        }

        button {
            background: rgba(0, 255, 65, 0.1);
            color: #00ff41;
            border: 1px solid #00ff41;
            padding: 0.5rem 1rem;
            font-family: 'VT323', monospace;
            font-size: 1rem;
            cursor: pointer;
            border-radius: 5px;
            transition: all 0.3s ease;
        }

        button:hover {
            background: rgba(0, 255, 65, 0.2);
            box-shadow: 0 0 10px rgba(0, 255, 65, 0.5);
        }

        button:active {
            background: rgba(0, 255, 65, 0.3);
        }

        .language-selector {
            margin-bottom: 1rem;
        }

        select {
            background: rgba(0, 0, 0, 0.8);
            color: #00ff41;
            border: 1px solid #00ff41;
            padding: 0.5rem;
            font-family: 'VT323', monospace;
            font-size: 1rem;
            border-radius: 5px;
        }

        .matrix-bg {
            position: fixed;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            pointer-events: none;
            z-index: -1;
        }

        .matrix-char {
            position: absolute;
            color: rgba(0, 255, 65, 0.1);
            font-family: 'VT323', monospace;
            font-size: 1rem;
            animation: matrix-fall linear infinite;
        }

        @keyframes matrix-fall {
            from {
                transform: translateY(-100vh);
                opacity: 1;
            }
            to {
                transform: translateY(100vh);
                opacity: 0;
            }
        }
    </style>
</head>
<body>
    <div class="matrix-bg" id="matrixBg"></div>
    
    <div class="clock-container">
        <div class="language-selector">
            <label for="language">Language:</label>
            <select id="language">
                <option value="en">English</option>
                <option value="es">Español</option>
                <option value="fr">Français</option>
                <option value="de">Deutsch</option>
                <option value="it">Italiano</option>
            </select>
        </div>
        
        <div class="display-frame">
            <div class="time-display" id="timeDisplay"></div>
            <div class="poem-display" id="poemDisplay">
                <span class="typing-text" id="typingText"></span>
            </div>
        </div>
        
        <div class="controls">
            <button onclick="generateNewPoem()">New Poem</button>
            <button onclick="toggleSound()">Toggle Sound</button>
            <button onclick="toggle24Hour()">Toggle 12/24h</button>
        </div>
    </div>

    <script>
        // Translations
        const translations = {
            en: {
                poems: [
                    "Time flows like a gentle stream,\nThrough moments that feel like a dream.",
                    "Each second ticks with steady grace,\nIn this eternal, timeless space.",
                    "The hours dance in rhythm true,\nAs morning turns to evening's hue.",
                    "Clock hands move in circles round,\nWhere time's sweet melody is found.",
                    "Minutes whisper secrets old,\nOf stories that will be told."
                ],
                controls: {
                    newPoem: "New Poem",
                    toggleSound: "Toggle Sound",
                    toggle24Hour: "Toggle 12/24h"
                }
            },
            es: {
                poems: [
                    "El tiempo fluye como un río,\nEn momentos de ensueño y brío.",
                    "Cada segundo marca el compás,\nEn este espacio eternal y más.",
                    "Las horas danzan con verdad,\nDe la mañana a la oscuridad.",
                    "Las manecillas giran sin cesar,\nDonde el tiempo suele sonar.",
                    "Los minutos susurran al viento,\nHistorias del tiempo y momento."
                ]
            },
            fr: {
                poems: [
                    "Le temps coule comme un ruisseau,\nÀ travers des moments si beaux.",
                    "Chaque seconde bat la mesure,\nDans cet espace sans blessure.",
                    "Les heures dansent en cadence,\nDu matin vers la décadence.",
                    "Les aiguilles tournent en rond,\nOù résonne le temps profond.",
                    "Les minutes murmurent des secrets,\nD'histoires et de souvenirs discrets."
                ]
            },
            de: {
                poems: [
                    "Die Zeit fließt wie ein sanfter Bach,\nDurch Momente, die uns Freude mach.",
                    "Jede Sekunde tickt mit Ruh,\nIn diesem Raum der Ewigkeit zu.",
                    "Die Stunden tanzen im Takt,\nVom Morgen bis die Nacht erwacht.",
                    "Die Zeiger drehen sich im Kreis,\nWo Zeit erklingt so sanft und leis.",
                    "Die Minuten flüstern alte Sagen,\nVon Geschichten aus vergangenen Tagen."
                ]
            },
            it: {
                poems: [
                    "Il tempo scorre come un ruscello,\nAttraverso momenti così belli.",
                    "Ogni secondo batte con grazia,\nIn questo spazio senza sazia.",
                    "Le ore danzano in ritmo vero,\nDal mattino al sera nero.",
                    "Le lancette girano in tondo,\nDove il tempo suona profondo.",
                    "I minuti sussurrano segreti,\nDi storie e ricordi discreti."
                ]
            }
        };

        let currentLanguage = 'en';
        let currentPoemIndex = 0;
        let soundEnabled = true;
        let is24Hour = false;
        let audioContext;
        let typingSpeed = 100;

        // Audio context for typing sounds
        function initAudio() {
            try {
                audioContext = new (window.AudioContext || window.webkitAudioContext)();
            } catch (e) {
                console.log('Audio not supported');
                soundEnabled = false;
            }
        }

        function playTypingSound() {
            if (!soundEnabled || !audioContext) return;
            
            const oscillator = audioContext.createOscillator();
            const gainNode = audioContext.createGain();
            
            oscillator.connect(gainNode);
            gainNode.connect(audioContext.destination);
            
            oscillator.frequency.setValueAtTime(800, audioContext.currentTime);
            oscillator.type = 'square';
            
            gainNode.gain.setValueAtTime(0.1, audioContext.currentTime);
            gainNode.gain.exponentialRampToValueAtTime(0.01, audioContext.currentTime + 0.1);
            
            oscillator.start(audioContext.currentTime);
            oscillator.stop(audioContext.currentTime + 0.1);
        }

        function updateTime() {
            const now = new Date();
            let hours = now.getHours();
            const minutes = now.getMinutes().toString().padStart(2, '0');
            const seconds = now.getSeconds().toString().padStart(2, '0');
            
            let timeString;
            if (is24Hour) {
                timeString = `${hours.toString().padStart(2, '0')}:${minutes}:${seconds}`;
            } else {
                const ampm = hours >= 12 ? 'PM' : 'AM';
                hours = hours % 12;
                hours = hours ? hours : 12;
                timeString = `${hours}:${minutes}:${seconds} ${ampm}`;
            }
            
            document.getElementById('timeDisplay').textContent = timeString;
        }

        function typeText(element, text, speed = typingSpeed) {
            element.textContent = '';
            let i = 0;
            
            function type() {
                if (i < text.length) {
                    element.textContent += text.charAt(i);
                    playTypingSound();
                    i++;
                    setTimeout(type, speed);
                }
            }
            
            type();
        }

        function generateNewPoem() {
            const poems = translations[currentLanguage].poems;
            currentPoemIndex = Math.floor(Math.random() * poems.length);
            const poem = poems[currentPoemIndex];
            const typingElement = document.getElementById('typingText');
            typeText(typingElement, poem);
        }

        function toggleSound() {
            soundEnabled = !soundEnabled;
            if (soundEnabled && !audioContext) {
                initAudio();
            }
        }

        function toggle24Hour() {
            is24Hour = !is24Hour;
            updateTime();
        }

        function changeLanguage() {
            const select = document.getElementById('language');
            currentLanguage = select.value;
            generateNewPoem();
        }

        function createMatrixEffect() {
            const matrixBg = document.getElementById('matrixBg');
            const chars = '01';
            
            setInterval(() => {
                const char = document.createElement('div');
                char.className = 'matrix-char';
                char.textContent = chars[Math.floor(Math.random() * chars.length)];
                char.style.left = Math.random() * 100 + 'vw';
                char.style.animationDuration = (Math.random() * 3 + 2) + 's';
                char.style.fontSize = (Math.random() * 0.5 + 0.5) + 'rem';
                
                matrixBg.appendChild(char);
                
                setTimeout(() => {
                    char.remove();
                }, 5000);
            }, 200);
        }

        // Event listeners
        document.getElementById('language').addEventListener('change', changeLanguage);

        // Initialize
        initAudio();
        updateTime();
        generateNewPoem();
        createMatrixEffect();
        
        // Update time every second
        setInterval(updateTime, 1000);
        
        // Generate new poem every 30 seconds
        setInterval(generateNewPoem, 30000);
    </script>
</body>
</html>
