---
// LinkedInBadge.astro
// A performant, responsive LinkedIn badge component with lazy loading and Core Web Vitals optimizations

interface Props {
  profileUrl: string;
  size?: 'small' | 'medium' | 'large';
  theme?: 'light' | 'dark' | 'auto';
  showName?: boolean;
  customText?: string;
  lazyLoad?: boolean;
  priority?: boolean;
  ariaLabel?: string;
  className?: string;
}

const {
  profileUrl,
  size = 'medium',
  theme = 'auto',
  showName = true,
  customText,
  lazyLoad = true,
  priority = false,
  ariaLabel = 'LinkedIn Profile Badge',
  className = ''
} = Astro.props;

// Extract LinkedIn username from profile URL
const getLinkedInUsername = (url: string): string => {
  const match = url.match(/linkedin\.com\/in\/([a-zA-Z0-9-]+)/);
  return match ? match[1] : '';
};

const username = getLinkedInUsername(profileUrl);

// Size configurations
const sizeConfig = {
  small: { width: '200', height: '160', badgeWidth: 'w-48', badgeHeight: 'h-40' },
  medium: { width: '300', height: '240', badgeWidth: 'w-72', badgeHeight: 'h-60' },
  large: { width: '400', height: '320', badgeWidth: 'w-96', badgeHeight: 'h-80' }
};

const currentSize = sizeConfig[size];

// Theme classes
const themeClasses = {
  light: 'bg-white border-gray-200',
  dark: 'bg-gray-900 border-gray-700',
  auto: 'bg-white dark:bg-gray-900 border-gray-200 dark:border-gray-700'
};
---

<div 
  class={`linkedin-badge relative inline-block rounded-lg border shadow-sm transition-all duration-300 hover:shadow-lg ${themeClasses[theme]} ${currentSize.badgeWidth} ${currentSize.badgeHeight} ${className}`}
  data-profile-url={profileUrl}
  data-username={username}
  data-size={size}
  data-theme={theme}
>
  <!-- Loading skeleton -->
  <div class="loading-skeleton absolute inset-0 rounded-lg bg-gradient-to-r from-gray-200 via-gray-300 to-gray-200 dark:from-gray-700 dark:via-gray-600 dark:to-gray-700 animate-pulse">
    <div class="p-4 space-y-3">
      <div class="h-16 w-16 rounded-full bg-gray-300 dark:bg-gray-600 mx-auto"></div>
      <div class="h-4 bg-gray-300 dark:bg-gray-600 rounded mx-auto w-3/4"></div>
      <div class="h-3 bg-gray-300 dark:bg-gray-600 rounded mx-auto w-1/2"></div>
    </div>
  </div>

  <!-- LinkedIn Badge Container -->
  <div 
    class="badge-container opacity-0 transition-opacity duration-300"
    style="min-height: inherit;"
  >
    <div 
      class="LI-profile-badge" 
      data-version="v1" 
      data-size={size} 
      data-locale="en_US" 
      data-type="vertical" 
      data-theme={theme} 
      data-vanity={username}
    >
      <a 
        class="LI-simple-link block p-4 text-center hover:bg-gray-50 dark:hover:bg-gray-800 transition-colors duration-200 rounded-lg" 
        href={profileUrl}
        target="_blank"
        rel="noopener noreferrer"
        aria-label={ariaLabel}
      >
        <!-- Fallback content when LinkedIn script doesn't load -->
        <div class="fallback-content">
          <div class="inline-flex items-center justify-center w-16 h-16 mb-3 bg-blue-600 rounded-full">
            <svg class="w-8 h-8 text-white" fill="currentColor" viewBox="0 0 24 24" aria-hidden="true">
              <path d="M20.447 20.452h-3.554v-5.569c0-1.328-.027-3.037-1.852-3.037-1.853 0-2.136 1.445-2.136 2.939v5.667H9.351V9h3.414v1.561h.046c.477-.9 1.637-1.85 3.37-1.85 3.601 0 4.267 2.37 4.267 5.455v6.286zM5.337 7.433c-1.144 0-2.063-.926-2.063-2.065 0-1.138.92-2.063 2.063-2.063 1.14 0 2.064.925 2.064 2.063 0 1.139-.925 2.065-2.064 2.065zm1.782 13.019H3.555V9h3.564v11.452zM22.225 0H1.771C.792 0 0 .774 0 1.729v20.542C0 23.227.792 24 1.771 24h20.451C23.2 24 24 23.227 24 22.271V1.729C24 .774 23.2 0 22.222 0h.003z"/>
            </svg>
          </div>
          {showName && (
            <p class="text-sm font-semibold text-gray-900 dark:text-white mb-1">
              {customText || 'View LinkedIn Profile'}
            </p>
          )}
          <p class="text-xs text-gray-600 dark:text-gray-400">
            Connect on LinkedIn
          </p>
        </div>
      </a>
    </div>
  </div>
</div>

<script define:vars={{ lazyLoad, priority, profileUrl, username, size, theme }}>
  // LinkedIn Badge Component with Performance Optimizations
  class LinkedInBadgeLoader {
    constructor() {
      this.badges = document.querySelectorAll('.linkedin-badge');
      this.observer = null;
      this.scriptsLoaded = new Set();
      this.init();
    }

    init() {
      if (lazyLoad && !priority) {
        this.setupIntersectionObserver();
      } else {
        this.loadAllBadges();
      }
    }

    setupIntersectionObserver() {
      if (!('IntersectionObserver' in window)) {
        // Fallback for older browsers
        this.loadAllBadges();
        return;
      }

      const options = {
        root: null,
        rootMargin: '50px',
        threshold: 0.1
      };

      this.observer = new IntersectionObserver((entries) => {
        entries.forEach(entry => {
          if (entry.isIntersecting) {
            this.loadBadge(entry.target);
            this.observer.unobserve(entry.target);
          }
        });
      }, options);

      this.badges.forEach(badge => {
        this.observer.observe(badge);
      });
    }

    loadAllBadges() {
      this.badges.forEach(badge => this.loadBadge(badge));
    }

    async loadBadge(badgeElement) {
      try {
        const profileUrl = badgeElement.dataset.profileUrl;
        const username = badgeElement.dataset.username;
        
        if (!username || !profileUrl) {
          console.warn('LinkedIn badge: Missing profile URL or username');
          this.showFallback(badgeElement);
          return;
        }

        // Load LinkedIn platform script
        await this.loadLinkedInScript();
        
        // Initialize the badge
        this.initializeBadge(badgeElement);
        
      } catch (error) {
        console.error('LinkedIn badge loading error:', error);
        this.showFallback(badgeElement);
      }
    }

    loadLinkedInScript() {
      return new Promise((resolve, reject) => {
        if (this.scriptsLoaded.has('linkedin-platform')) {
          resolve();
          return;
        }

        const script = document.createElement('script');
        script.src = 'https://platform.linkedin.com/badges/js/profile.js';
        script.async = true;
        script.defer = true;
        
        script.onload = () => {
          this.scriptsLoaded.add('linkedin-platform');
          resolve();
        };
        
        script.onerror = () => {
          reject(new Error('Failed to load LinkedIn platform script'));
        };
        
        // Optimize loading
        const firstScript = document.getElementsByTagName('script')[0];
        firstScript.parentNode.insertBefore(script, firstScript);
      });
    }

    initializeBadge(badgeElement) {
      const skeleton = badgeElement.querySelector('.loading-skeleton');
      const container = badgeElement.querySelector('.badge-container');
      
      // Performance optimization: use requestAnimationFrame for smooth transitions
      requestAnimationFrame(() => {
        if (skeleton) {
          skeleton.style.opacity = '0';
          setTimeout(() => skeleton.remove(), 300);
        }
        
        if (container) {
          container.style.opacity = '1';
        }

        // If LinkedIn script loaded successfully, let it render
        if (window.LI && window.LI.reload) {
          try {
            window.LI.reload();
          } catch (e) {
            console.warn('LinkedIn badge reload failed:', e);
            this.showFallback(badgeElement);
          }
        } else {
          this.showFallback(badgeElement);
        }
      });
    }

    showFallback(badgeElement) {
      const skeleton = badgeElement.querySelector('.loading-skeleton');
      const container = badgeElement.querySelector('.badge-container');
      const fallback = badgeElement.querySelector('.fallback-content');
      
      if (skeleton) {
        skeleton.style.opacity = '0';
        setTimeout(() => skeleton.remove(), 300);
      }
      
      if (container) {
        container.style.opacity = '1';
      }
      
      if (fallback) {
        fallback.style.display = 'block';
      }
    }

    // Clean up observer on page unload
    destroy() {
      if (this.observer) {
        this.observer.disconnect();
      }
    }
  }

  // Initialize when DOM is ready
  if (document.readyState === 'loading') {
    document.addEventListener('DOMContentLoaded', () => {
      new LinkedInBadgeLoader();
    });
  } else {
    new LinkedInBadgeLoader();
  }

  // Clean up on page unload
  window.addEventListener('beforeunload', () => {
    if (window.linkedInBadgeLoader) {
      window.linkedInBadgeLoader.destroy();
    }
  });
</script>

<style>
  .linkedin-badge {
    /* Optimize for Core Web Vitals */
    contain: layout style paint;
    will-change: transform;
  }

  .loading-skeleton {
    background-size: 200% 100%;
    animation: shimmer 1.5s infinite linear;
  }

  @keyframes shimmer {
    0% {
      background-position: -200% 0;
    }
    100% {
      background-position: 200% 0;
    }
  }

  .badge-container {
    transition: opacity 0.3s ease-in-out;
  }

  .fallback-content {
    display: none;
  }

  /* Responsive optimizations */
  @media (max-width: 640px) {
    .linkedin-badge {
      width: 100% !important;
      max-width: 280px;
      margin: 0 auto;
    }
  }

  /* Reduce motion for accessibility */
  @media (prefers-reduced-motion: reduce) {
    .linkedin-badge,
    .badge-container,
    .loading-skeleton {
      animation: none !important;
      transition: none !important;
    }
  }

  /* High contrast mode support */
  @media (prefers-contrast: high) {
    .linkedin-badge {
      border-width: 2px;
      border-color: currentColor;
    }
  }

  /* Print styles */
  @media print {
    .linkedin-badge {
      break-inside: avoid;
    }
    .loading-skeleton {
      display: none;
    }
    .badge-container {
      opacity: 1 !important;
    }
  }
</style>
