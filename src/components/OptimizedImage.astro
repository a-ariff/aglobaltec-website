---
// OptimizedImage.astro - High-performance image component with lazy loading and responsive design
export interface Props {
  src: string
  alt: string
  width?: number
  height?: number
  quality?: number
  format?: 'avif' | 'webp' | 'jpeg' | 'png'
  loading?: 'lazy' | 'eager'
  fetchpriority?: 'high' | 'low' | 'auto'
  sizes?: string
  class?: string
  style?: string
  aspectRatio?: string
}

const {
  src,
  alt,
  width,
  height,
  quality = 80,
  format = 'webp',
  loading = 'lazy',
  fetchpriority = 'auto',
  sizes,
  class: className,
  style,
  aspectRatio,
  ...rest
} = Astro.props

// Import Astro's Image component
import { Image } from 'astro:assets'

// Generate responsive image widths for different screen sizes
const responsiveWidths = [320, 480, 768, 1024, 1200, 1600]
const defaultSizes = sizes || '(max-width: 768px) 100vw, (max-width: 1200px) 50vw, 33vw'

// Optimize image props for performance
const imageProps = {
  src,
  alt,
  width,
  height,
  quality,
  format,
  loading,
  fetchpriority,
  sizes: defaultSizes,
  widths: responsiveWidths,
  ...rest
}

// Generate inline styles for aspect ratio and additional styling
const inlineStyles = [
  aspectRatio ? `aspect-ratio: ${aspectRatio}` : '',
  'object-fit: cover',
  'width: 100%',
  'height: auto',
  style || ''
].filter(Boolean).join('; ')
---

<!-- 
  Optimized Image Component Features:
  - Automatic format conversion (WebP/AVIF support)
  - Responsive image generation with multiple sizes
  - Lazy loading by default for better Core Web Vitals
  - Aspect ratio preservation
  - SEO-friendly alt text requirement
  - Performance optimizations with fetchpriority
-->
<Image
  {...imageProps}
  class={className ? `optimized-image ${className}` : 'optimized-image'}
  style={inlineStyles}
  decoding="async"
/>

<style>
  .optimized-image {
    /* Prevent layout shift during image load */
    display: block;
    max-width: 100%;
    height: auto;
    
    /* Improve rendering performance */
    image-rendering: -webkit-optimize-contrast;
    image-rendering: crisp-edges;
    
    /* Smooth loading animation */
    opacity: 0;
    animation: fadeIn 0.3s ease-in-out forwards;
    
    /* Prevent text selection */
    user-select: none;
    -webkit-user-drag: none;
  }
  
  @keyframes fadeIn {
    from {
      opacity: 0;
    }
    to {
      opacity: 1;
    }
  }
  
  /* Loading state styles */
  .optimized-image[loading="lazy"] {
    /* Intersection observer fallback */
    background-color: #f0f0f0;
    background-image: linear-gradient(45deg, transparent 40%, rgba(255, 255, 255, 0.5) 50%, transparent 60%);
    background-size: 200% 100%;
    animation: loading 1.5s infinite linear;
  }
  
  @keyframes loading {
    0% {
      background-position: 200% 0;
    }
    100% {
      background-position: -200% 0;
    }
  }
  
  /* Dark mode support */
  @media (prefers-color-scheme: dark) {
    .optimized-image[loading="lazy"] {
      background-color: #333;
    }
  }
  
  /* High contrast mode support */
  @media (prefers-contrast: high) {
    .optimized-image {
      filter: contrast(1.2);
    }
  }
  
  /* Reduced motion support */
  @media (prefers-reduced-motion: reduce) {
    .optimized-image {
      animation: none;
    }
    
    .optimized-image[loading="lazy"] {
      animation: none;
    }
  }
  
  /* Print styles */
  @media print {
    .optimized-image {
      break-inside: avoid;
      max-width: 100% !important;
      height: auto !important;
    }
  }
</style>

<script>
  // Enhanced performance monitoring and error handling
  document.addEventListener('DOMContentLoaded', () => {
    const images = document.querySelectorAll('.optimized-image')
    
    images.forEach((img) => {
      // Performance monitoring
      const observer = new PerformanceObserver((list) => {
        const entries = list.getEntries()
        entries.forEach((entry) => {
          if (entry.name === img.currentSrc) {
            console.log(`Image loaded: ${entry.name}, Duration: ${entry.duration}ms`)
          }
        })
      })
      
      if ('observe' in observer) {
        observer.observe({ entryTypes: ['resource'] })
      }
      
      // Error handling with retry mechanism
      img.addEventListener('error', (event) => {
        console.warn('Image failed to load:', event.target.src)
        
        // Fallback to lower quality format if WebP fails
        if (event.target.src.includes('.webp')) {
          event.target.src = event.target.src.replace('.webp', '.jpg')
        }
      })
      
      // Loading complete handler
      img.addEventListener('load', () => {
        img.style.opacity = '1'
        
        // Report Core Web Vitals metrics
        if ('web-vitals' in window) {
          // This would integrate with web-vitals library if available
          console.log('Image loaded successfully, updating CLS metrics')
        }
      })
    })
  })
</script>
